@using Portalia.Models

@model LoginViewModel
@{
    Layout = "~/Views/Shared/_LayoutLogin.cshtml";
    ViewBag.Title = "Connexion sur votre Espace Personnalisé | Portalia.fr ";
    ViewBag.Description = "Connectez-vous sur votre espace personnalisé et retrouvez tous vos éléments pour gérer votre activité en portage salarial.";
}
<section id="login-section" class="login">
    <div class="row">
        <div class="col-xs-12 full-height">
            <div class="login__container">
                @using (Html.BeginForm("Login", "Account", FormMethod.Post, new { id = "login-form", @class = "login-form" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="login-form__heading">
                        <h1 class="login__heading-title">Connectez-vous</h1>
                        <small class="login__heading-description">
                            Pas encore inscrit ?
                            <a class="login-link" href="@Url.Action("Register")">Créer un nouveau compte</a>
                        </small>
                    </div>
                    <div class="login-form__body">
                        <div class="form-group">
                            @*<input type="email" class="form-control" placeholder="Email" />*@
                            @Html.TextBoxFor(c => c.Email, new { @class = "form-control", id = "mail-box", placeholder = "E-mail" })
                            @Html.ValidationMessageFor(c => c.Email, "", new { @class = "text-danger login-form-error-message" })
                        </div>
                        <div class="form-group login-credentials">
                            @*<input type="password" class="form-control" placeholder="Mot de passe" />*@
                            @Html.PasswordFor(c => c.Password, new { @class = "form-control", id = "password-box", placeholder = "Mot de passe" })
                            @Html.ValidationMessageFor(c => c.Password, "", new { @class = "text-danger login-form-error-message" })
                        </div>

                        @if (Model.Errors?.Any() == true)
                        {
                            <div class="form-group login-credentials">
                                <div class="login-form-error-message">
                                    @foreach (var error in Model.Errors)
                                    {
                                        <p>@error</p>
                                    }
                                </div>
                            </div>
                        }

                        <div class="form-group login-credentials">
                            <a class="login-link" href="@Url.Action("ForgotPassword", "Account")">Mot de passe oublié?</a>
                        </div>
                        <div class="form-group">
                            <button type="submit" class="login-form-button" id="login-btn">Se connecter</button>
                        </div>
                    </div>
                }
                @using (Html.BeginForm("ExternalLogin", "Account", new { returnUrl = ViewBag.ReturnUrl, provider = ViewBag.LinkedInConnection }, FormMethod.Post, new { id = "login-form-portalia", @class = "login-form" }))
                {
                    @Html.AntiForgeryToken()
                    <button type="submit" class="login-form-button login-credentials" id="login-btn-linkedin"><i class="fab fa-linkedin fa-2x" aria-hidden="true"></i> Se connecter avec LinkedIn</button>
                }
            </div>
        </div>
    </div>
</section>

@section scripts {
    <script type="text/javascript">
        function endsWithAnyI(string, suffixes) {
            var lowerString = string.toLowerCase();
            return suffixes.some(function (suffix) {
                return lowerString.endsWith(suffix.toLowerCase());
            });
        }

        $(document).ready(function () {
            const employeeEmailDomains = '@ViewBag.EmployeeEmailDomains'.split(',');
            var $email = $('#mail-box');
            $email.on('input paste blur focus load', function () {
                const email = $email.val();
                const isDomainEmail = employeeEmailDomains !== '' && endsWithAnyI(email, employeeEmailDomains);
                $('#login-section').toggleClass('login-adfs', isDomainEmail);
                var actionUrl;
                if (isDomainEmail)
                    actionUrl = `@Url.Action("ExternalLogin", "Account")?returnUrl=@(ViewBag.ReturnUrl)&provider=@(ViewBag.AdfsConnection)`;
                else
                    actionUrl = `@Url.Action("Login", "Account")`;
                $('#login-form').prop("action", actionUrl);
            });
        });
    </script>
}

@section styles {
    <style type="text/css">
        #login-section.login-adfs .login-credentials {
            display: none;
        }

        #login-btn-linkedin {
            padding-top: 14px;
            padding-bottom: 10px;
        }

        #login-btn-linkedin svg {
            margin-right: 10px;
            position: relative;
            top: -2px;
        }
    </style>
}